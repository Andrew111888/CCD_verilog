module tb_ad9235_driver;

    // Testbench Signals
    reg clk;               // 100 MHz
    reg rst_n;             // 低有效复位
    reg [11:0] adc_data;   // AD9235 并行数据
    reg cdsclk1;           // CCD 时序作为 ADC 采样时钟
    wire adcclk;           // 送给 AD9235 的时钟（与 cdsclk1 同步）
    wire [11:0] pixel_data; // 采集到的像素数据
    wire pixel_valid;      // 数据有效

    // Instantiate the ad9235_driver module
    ad9235_driver uut (
        .clk(clk),
        .rst_n(rst_n),
        .adc_data(adc_data),
        .cdsclk1(cdsclk1),
        .adcclk(adcclk),
        .pixel_data(pixel_data),
        .pixel_valid(pixel_valid)
    );

    // Clock generation (100 MHz)
    always begin
        #5 clk = ~clk; // 100 MHz clock
    end

    // Generate cdsclk1 (simulating CCD clock, let's assume 10 MHz)
    always begin
        #50 cdsclk1 = ~cdsclk1; // 10 MHz clock
    end

    // Stimulus process
    initial begin
        // Initialize signals
        clk = 0;
        rst_n = 0;
        adc_data = 12'd0;
        cdsclk1 = 0;

        // Apply reset
        #20 rst_n = 1; // Release reset after 20 ns

        // Apply some test data to adc_data
        #100 adc_data = 12'd1024; // Apply sample data to adc_data
        #100 adc_data = 12'd2048;
        #100 adc_data = 12'd4096;

        // Let the simulation run for a while
        #500;

        // Finish simulation
        $finish;
    end

    // Monitor outputs
    initial begin
        $monitor("Time: %0t, rst_n: %b, adc_data: %d, adcclk: %b, pixel_data: %d, pixel_valid: %b", 
                 $time, rst_n, adc_data, adcclk, pixel_data, pixel_valid);
    end

endmodule
